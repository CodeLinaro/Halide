namespace Halide.Serdes;

// This corresponds to the version.
file_identifier "HLD0";

// File extension of any written files.
file_extension "hir";

// from src/IR.cpp
union Stmt {
    LetStmt,
    AssertStmt,
    ProducerConsumer,
    For,
    Store,
    Provide,
    Allocate,
    Free,
    Realize,
    Block,
    IfThenElse,
    Evaluate,
    Prefetch,
    Acquire,
    Fork,
    Atomic,
}

table LetStmt {
    name: string;
    // value: Expr;
    body: Stmt;
}

table AssertStmt {
    // condition: Expr;
    // message: Expr;
}

table ProducerConsumer {
    name: string;
    is_producer: bool;
    body: Stmt;
}

table For {
    name: string;
    // min: Expr;
    // extent: Expr;
    // for_type: ForType;
    // device_api: DeviceAPI; TODO: no DeviceAPI yet
    body: Stmt;
}

table Store {
    name: string;
    // predicate: Expr;
    // value: Expr;
    // index: Expr;
    // param: Parameter; TODO: no Parameter yet
    // alignment: ModulusRemainder; TODO: no ModulusRemainder yet
}

table Provide {
    name: string;
    // values: [Expr];
    // args: [Expr];
    // predicate: Expr;
}

table Allocate {
    name: string;
    type: Type;
    // memory_type: MemoryType;
    // extents: [Expr];
    // condition: Expr;
    // new_expr: Expr;
    free_function: string;
    padding: int32;
    body: Stmt;
}

table Free {
    name: string;
}

table Realize {
    name: string;
    types: [Type];
    // memory_type: MemoryType; TODO: no MemoryType yet
    // bounds: Region; TODO: no Range yet
    // condition: Expr;
    body: Stmt;
}

table Block {
    first: Stmt;
    rest: Stmt;
}

table IfThenElse {
    // condition: Expr;
    then_case: Stmt;
    else_case: Stmt;
}

table Evaluate {
    // value: Expr;
}

table Prefetch {
    name: string;
    types: [Type];
    // bounds: Region; TODO: no Region yet
    // prefetch: PrefetchDirective; TODO: no PrefetchDirective yet
    // condition: Expr;
    body: Stmt;
}

table Acquire {
    // semaphores: Expr;
    // count: Expr;
    body: Stmt;
}

table Fork {
    first: Stmt;
    rest: Stmt;
}

table Atomic {
    producer_name: string;
    mutex_name: string;
    body: Stmt;
}

enum TypeCode: byte {
    Int,
    UInt,
    Float,
    Handle,
    BFloat,
}

// TODO: no halide_handle_cplusplus_type yet
table Type {
    code: TypeCode;
    bits: uint8;
    lanes: int32;
}

// Halide::internal::Function
table Func {
    name: string;
    origin_name: string;
    output_types: [Type];
    required_types: [Type];
    required_dims: int32;
    args: [string];
    // func_schedule: FuncSchedule;
    // init_def: Definition;
    // updates: [Definition];
    // debug_file: string;
    // output_buffers: [Parameter];
    // extern_arguments: [ExternFuncArgument];
    // extern_function_name: string;
}

table Pipeline {
    outputs: [Func];
    requirements: [Stmt];
    // trace_pipeline: bool;
}

root_type Pipeline;
